<?php

namespace app\apiadmin\controller;

use app\common\controller\Backend;
use app\common\lib\Sms;
use think\Cache;
use think\Db;
use think\Validate;

class Personal extends Backend {
    /**
     * @Purpose
     * 管理员ID
     * @var int
     */
    private $adminId = 0;

    public function _initialize() {
        parent::_initialize(); // TODO: Change the autogenerated stub

        $admin_info = $this->admininfo;
        if (!isset($admin_info) || empty($admin_info)) {
            $this->ajaxReturn(500, '管理员信息缺失');
        }
        $this->adminId = $admin_info->id ? $admin_info->id : 0;
        if (!isset($this->adminId) || empty($this->adminId)) {
            $this->ajaxReturn(500, '管理员信息错误');
        }
    }


    /**
     * @Purpose:
     * 个人中心首页
     * @Method index()
     *
     * @param null
     *
     * @return Jsonp
     *
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     *
     * @link {domain}personal/index
     *
     * @author  Administrator
     * @version 1.1
     * @since   2022/3/7
     */
    public function index() {
        $field = 'id, username, last_login_time, openid, qy_userid, bind_qywx, bind_qywx_time, mobile, avatar';
        $info = model('Admin')
            ->field($field)
            ->find($this->adminId);

        if (isset($info) && !empty($info)) {
            $this->ajaxReturn(200, 'SUCCESS', $info);
        } else {
            $this->ajaxReturn(500, '个人信息异常');
        }
    }


    /**
     * @Purpose:
     * 修改头像
     * @Method avatar()
     *
     * @param string $avatar 头像URL
     *
     * @return Jsonp
     *
     * @throws null
     *
     * @link {domain}personal/avatar
     *
     * @author  Administrator
     * @version 1.1
     * @since   2022/3/7
     */
    public function avatar() {
        $input_data['avatar'] = input('post.avatar', '');

        $rule = [
            'avatar' => 'require|url'
        ];

        $msg = [
            'avatar.require' => '请上传头像',
            'avatar.url' => '请上传正确格式的头像'
        ];

        $validate = new Validate($rule, $msg);
        if (!$validate->check($input_data)) {
            $this->ajaxReturn(500, $validate->getError());
        }

        // 开启事务
        Db::startTrans();
        try {
            $admin_result = model('Admin')
                ->allowField(true)
                ->save(
                    $input_data,
                    ['id' => $this->adminId]
                );
            if (false === $admin_result) {
                throw new \Exception(model('Admin')->getError());
            }

            // 日志
            $log_result = model('AdminLog')->record(
                '修改头像',
                $this->admininfo
            );
            if (false === $log_result) {
                throw new \Exception(model('AdminLog')->getError());
            }

            // 提交事务
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollBack();
            $this->ajaxReturn(500, $e->getMessage());
        }

        $this->ajaxReturn(200, '头像修改成功');
    }


    /**
     * @Purpose:
     * 修改账户名称
     * @Method username()
     *
     * @param string $username 账户名称
     *
     * @return Jsonp
     *
     * @throws null
     *
     * @link {domain}personal/username
     *
     * @author  Administrator
     * @version 1.1
     * @since   2022/3/7
     */
    public function username() {
        $input_data['username'] = input('post.username', '', 'trim,htmlspecialchars');

        $rule = [
            'username' => 'require|chsAlphaNum|length:3,15|checkOldUsername'
        ];

        $msg = [
            'username.require' => '请输入账号名称',
            'username.chsAlphaNum' => '账号名称只能是汉字、字母和数字',
            'username.length' => '账号名称的长度为3~15'
        ];

        $old_username = model('Admin')->where('id', $this->adminId)
            ->value('username');

        $validate = new Validate($rule, $msg);
        $validate->extend('checkOldUsername', function ($value) use ($old_username) {
            if ($old_username == $value) {
                return '新账号名称和旧账号名称相同';
            }
            return true;
        });
        if (!$validate->check($input_data)) {
            $this->ajaxReturn(500, $validate->getError());
        }

        // 开启事务
        Db::startTrans();
        try {
            $repeat = model('Admin')
                ->where('username', '=', $input_data['username'])
                ->where('id', '<>', $this->adminId)
                ->find();
            if (false === $repeat) {
                throw new \Exception(model('Admin')->getError());
            }
            if (isset($repeat) && !empty($repeat)) {
                $this->ajaxReturn(500, '账号名称已存在');
            }

            $result = model('Admin')
                ->where('id', '=', $this->adminId)
                ->where('username', '<>', $input_data['username'])
                ->update($input_data);
            if (false === $result) {
                throw new \Exception(model('Admin')->getError());
            }
            if (!isset($result) || empty($result)) {
                $this->ajaxReturn(500, '账号名称修改失败');
            }

            // 日志
            $log_result = model('AdminLog')->record(
                '修改账号名称【' . $old_username . ' => ' . $input_data['username'] . '】',
                $this->admininfo
            );
            if (false === $log_result) {
                throw new \Exception(model('AdminLog')->getError());
            }

            // 提交事务
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollBack();
            $this->ajaxReturn(500, $e->getMessage());
        }

        $this->ajaxReturn(200, '账号名称修改成功');
    }


    /**
     * @Purpose:
     * 修改登录密码
     * @Method password()
     *
     * @param string $old_password 旧密码
     * @param string $password 新密码
     * @param string $password_confirm 确认密码
     *
     * @return Jsonp
     *
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     *
     * @link {domain}personal/password
     *
     * @author  Administrator
     * @version 1.1
     * @since   2022/3/8
     */
    public function password() {
        // 1.接收参数
        $input_data = [
            'old_password' => input('post.old_password/s', '', 'trim'),
            'password' => input('post.password/s', '', 'trim'),
            'password_confirm' => input('post.password_confirm/s', '', 'trim'),
        ];

        // 实例化`Admin`模型，查询信息
        $model = model('Admin')
            ->where('id', $this->adminId)
            ->find();

        $validate = new \think\Validate(
            [
                'old_password' => 'checkOldPassword',
                'password' => 'require|length:6,30|confirm',
                'password_confirm' => 'require|length:6,30',
            ],
            [
                'password.require' => '请输入新密码',
                'password.length' => '新密码长度为6~30',
                'password.confirm' => '两次输入的密码不一致',
                'password_confirm.require' => '请输入确认密码',
                'password_confirm.length' => '确认密码长度为6~30',
            ]
        );
        $validate->extend('checkOldPassword', function ($value) use ($model, $input_data) {
            if (!isset($model->password) || empty($model->password)) {
                return '旧密码异常';
            }
            if (!isset($value) || empty($value)) {
                return '请输入旧密码';
            }
            if ($value == $input_data['password']) {
                return '新密码与旧密码相同';
            }
            $make_old = $model->makePassword($input_data['old_password'], $model->pwd_hash);
            if (
                $model->password != $make_old
            ) {
                return '原密码错误';
            }
            return true;
        });

        if (!$validate->check($input_data)) {
            $this->ajaxReturn(500, $validate->getError());
        }

        // 开启事务
        Db::startTrans();
        try {
            $model->pwd_hash = randstr();
            $model->password = $model->makePassword(
                $input_data['password'],
                $model->pwd_hash
            );
            $result = $model->save();
            if (false === $result) {
                throw new \Exception(model('Admin')->getError());
            }
            if (!isset($result) || empty($result)) {
                $this->ajaxReturn(500, '登录密码修改失败');
            }

            // 日志
            $log_result = model('AdminLog')->record(
                '修改登录密码',
                $this->admininfo
            );
            if (false === $log_result) {
                throw new \Exception(model('AdminLog')->getError());
            }

            // 提交事务
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollBack();
            $this->ajaxReturn(500, $e->getMessage());
        }

        $this->ajaxReturn(200, '登录密码修改成功');
    }


    /**
     * @Purpose:
     * 发送绑定手机验证码
     * @Method bindingCode()
     *
     * @param string $mobile 绑定手机号
     *
     * @return Jsonp
     *
     * @throws null
     *
     * @link {domain}personal/bindingCode
     *
     * @author  Administrator
     * @version 1.1
     * @since   2022/3/8
     */
    public function bindingCode() {
        $mobile = input('post.mobile/s', '', 'trim');
        if (!fieldRegex($mobile, 'mobile')) {
            $this->ajaxReturn(500, '手机号格式错误');
        }

        $last_time = cache('sendsms_last_time_' . $mobile);
        if (isset($last_time) && !empty($last_time)) {
            $try_time = 60 - (time() - $last_time);
            $this->ajaxReturn(500, "请{$try_time}秒后再重新获取");
        }

        //检测手机号是否存在
        $is_exist = $this->checkMobileExist($mobile);
        if ($is_exist) {
            $this->ajaxReturn(500, '手机号已占用');
        }
        $code = mt_rand(1000, 9999) . '';
        $templateCode = 'SMS_5';
        $params = [
            'code' => $code,
            'sitename' => config('global_config.sitename')
        ];
        $class = new Sms();
        if (false === $class->send($mobile, $templateCode, $params)) {
            $this->ajaxReturn(500, $class->getError());
        }
        cache(
            'smscode_bind_admin_mobile' . $mobile,
            [
                'code' => $code,
                'mobile' => $mobile,
            ],
            180
        );
        cache('sendsms_last_time_' . $mobile, time(), 60);
        cache('smscode_error_num_' . $mobile, 0, 180);
        $this->ajaxReturn(200, '发送验证码成功');
    }


    /**
     * @Purpose:
     * 修改绑定手机
     * @Method bindingMobile()
     *
     * @param string $mobile 手机号
     * @param string $code 短信验证码
     *
     * @return Jsonp
     *
     * @throws null
     *
     * @link {domain}personal/bindingMobile
     *
     * @author  Administrator
     * @version 1.1
     * @since   2022/3/8
     */
    public function bindingMobile() {
        $input_data = [
            'mobile' => input('post.mobile/s', '', 'trim'),
            'code' => input('post.code/s', '', 'trim'),
        ];
        $validate = new \think\Validate(
            [
                'mobile' => 'require|checkMobile',
                'code' => 'require|length:4'
            ],
            [
                'mobile.require' => '请输入手机号',
                'code.require' => '请输入短信验证码',
                'code.length' => '请输入4位短信验证码'
            ]
        );
        // 实例化`Admin`模型，查询信息
        $model = model('Admin')
            ->where('id', $this->adminId)
            ->find();
        $validate->extend('checkMobile', function ($value) use ($model) {
            if (fieldRegex($value, 'mobile')) {
                $is_exist = $this->checkMobileExist($value);
                if ($is_exist) {
                    return '手机号已占用';
                }

                if ($model->mobile == $value) {
                    return '新手机号和旧手机号相同';
                }

                return true;
            } else {
                return '请输入正确的手机号码';
            }
        });

        if (!$validate->check($input_data)) {
            $this->ajaxReturn(500, $validate->getError());
        }
        $auth_result = cache('smscode_bind_admin_mobile' . $input_data['mobile']);
        if (
            $auth_result === false ||
            $auth_result['code'] != $input_data['code'] ||
            $auth_result['mobile'] != $input_data['mobile']
        ) {
            $error_num = cache('smscode_error_num_' . $input_data['mobile']);
            if ($error_num !== false && $error_num >= 5) {
                $this->ajaxReturn(500, '验证码失效，请重新获取');
            }
            Cache::inc('smscode_error_num_' . $input_data['mobile']);
            $this->ajaxReturn(500, '验证码错误');
        }


        // 开启事务
        Db::startTrans();
        try {
            $model->mobile = $input_data['mobile'];
            $result = $model->save();
            if (false === $result) {
                throw new \Exception(model('Admin')->getError());
            }
            if (!isset($result) || empty($result)) {
                $this->ajaxReturn(500, '手机绑定失败');
            }

            // 日志
            $log_result = model('AdminLog')->record(
                '绑定手机【' . $input_data['mobile'] . '】',
                $this->admininfo
            );
            if (false === $log_result) {
                throw new \Exception(model('AdminLog')->getError());
            }

            cache('smscode_bind_admin_mobile' . $input_data['mobile'], null);

            // 提交事务
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollBack();
            $this->ajaxReturn(500, $e->getMessage());
        }

        $this->ajaxReturn(200, '手机绑定成功');
    }


    /**
     * @Purpose:
     * 检测手机号是否存在
     * @Method checkMobileExist()
     *
     * @param string $mobile 手机号
     *
     * @return bool
     *
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     *
     * @link XXXXXXXXXX
     *
     * @author  Administrator
     * @version 1.1
     * @since   2022/3/8
     */
    private function checkMobileExist($mobile) {
        $info = model('Admin')
            ->where([
                'mobile' => $mobile,
            ])
            ->find();
        if (null === $info) {
            return false;
        } else {
            return true;
        }
    }
}
