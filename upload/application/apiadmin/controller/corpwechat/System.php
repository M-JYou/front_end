<?php


namespace app\apiadmin\controller\corpwechat;

use app\common\base\Admininfo;
use app\common\controller\Backend;
use app\common\lib\corpwechat\Callback;
use app\common\lib\corpwechat\callback\WXBizMsgCrypt;
use app\common\lib\corpwechat\Oauth;
use app\common\lib\corpwechat\promise\Corp;
use app\common\lib\corpwechat\User;
use app\common\lib\corpwechat\Utils;
use app\common\lib\corpwechat\callback\DecryMsg;
use think\Db;
use think\Request;
use think\response\Jsonp;
use think\Validate;

class System extends Backend {
  /** 企业ID
   * @var string
   */
  private $corpId = '';

  /** 应用ID
   * @var string
   */
  private $agentId = '';

  /** 应用的凭证密钥
   * @var string
   */
  private $corpSecret = '';

  /** 通讯录的凭证秘钥
   * @var string
   */
  private $customerContactSecret = '';

  private $token = '';

  private $EncodingAESKey = '';


  public function _initialize() {
    parent::_initialize(); // TODO: Change the autogenerated stub
    $apiConfig = config('global_config.corpwechat_api');
    if (empty($apiConfig) || !isset($apiConfig) || !is_array($apiConfig)) {
      $this->ajaxReturn(500, '请先完成企业微信配置');
    }

    $is_open = $apiConfig['is_open'] ? intval($apiConfig['is_open']) : -1;

    switch ($is_open) {
      case 1:
        $this->corpId = isset($apiConfig['corpid']) ? $apiConfig['corpid'] : '';
        $this->agentId = isset($apiConfig['agentid']) ? $apiConfig['agentid'] : '';
        $this->corpSecret = isset($apiConfig['corpsecret']) ? $apiConfig['corpsecret'] : '';
        $this->customerContactSecret = isset($apiConfig['customer_contact_secret']) ? $apiConfig['customer_contact_secret'] : '';
        $this->token = isset($apiConfig['token']) ? $apiConfig['token'] : '';
        $this->EncodingAESKey = isset($apiConfig['encoding_ase_key']) ? $apiConfig['encoding_ase_key'] : '';
        break;
      case 2:
        $this->ajaxReturn(500, '企微服务已关闭');

      case -1:
        $this->ajaxReturn(500, '企微服务状态异常');
    }
  }


  /** 测试企业微信配置项
   * @Method check
   *
   * @param integer $is_open 微信企业开关：bool 0:关闭;1:开启
   * @param string $corpId 企业ID
   * @param string $secret 应用的凭证密钥
   *
   * @return Jsonp
   *
   * @link {domain}corpwechat/system/check
   *
   * @author  Administrator
   * @version 1.1
   * @since   2022/2/23
   */
  public function check() {
    // 接受请求参数
    $input_data = [
      'is_open' => input('post.is_open/d', 0, 'intval'),  // bool 0:关闭;1:开启
      'corpId' => input('post.corpId/s', '', 'trim'),     // 企业ID
      'secret' => input('post.secret/s', '', 'trim')      // 应用的凭证密钥
    ];

    // Validate验证规则
    $rule = [
      'is_open' => 'require|eq:1',
      'corpId' => 'require|alphaNum',
      'secret' => 'require|alphaDash'
    ];

    // Validate报错信息
    $msg = [
      'is_open.require' => '请先打开企微开关',
      'is_open.eq' => '请先打开企微开关',
      'corpId.require' => '请输入企业ID',
      'corpId.alphaNum' => '请输入正确的企业ID',
      'secret.require' => '请输入应用的凭证密钥',
      'secret.alphaDash' => '请输入正确的应用的凭证密钥'
    ];

    // 实例化验证类
    $validate = new Validate($rule, $msg);
    if (!$validate->check($input_data)) {
      $this->ajaxReturn(500, $validate->getError());
    }


    $obj_corp = new Corp($input_data['corpId'], $input_data['secret'], 'check');
    $access_token = $obj_corp->accessToken();

    if (false === $access_token) {
      $this->ajaxReturn(500, $obj_corp->getError());
    } else {
      model('AdminLog')->record('测试企业微信配置项', $this->admininfo);
      $this->ajaxReturn(200, '企微配置测试通过');
    }
  }


  /** 获取企业微信服务器的ip段
   * @Method getCallbackIp
   *
   * @param null
   * @return Jsonp
   *
   * @link {domain}corpwechat/system/getCallbackIp
   *
   * @author  Administrator
   * @version 1.1
   * @since   2022/2/23
   */
  public function getCallbackIp() {
    $callback = new Callback($this->corpId, $this->corpSecret);
    $result = $callback->getCallbackIp();

    if (false === $result) {
      $this->ajaxReturn(500, $callback->getError());
    } else {
      if (isset($result['ip_list']) && is_array($result['ip_list'])) {
        $this->ajaxReturn(200, 'SUCCESS', $result);
      } else {
        $this->ajaxReturn(500, '业微信服务器的ip段获取失败');
      }
    }
  }


  /** 构造独立窗口登录二维码
   * @Method authorizeCode()
   *
   * @param null
   *
   * @return Jsonp
   *
   * @throws null
   *
   * @link {domain}corpwechat/system/authorizeCode
   *
   * @author  Administrator
   * @version 1.1
   * @since   2022/2/28
   */
  public function authorizeCode() {
    define('BOUND', 1); // 已绑定
    define('UNBOUND', 0); // 未绑定

    $is_bind = model('Admin')
      ->where('id', $this->admininfo->id)
      ->value('bind_qywx');

    switch ($is_bind) {
      case BOUND: // 已绑定
        $this->ajaxReturn(500, '企业微信已绑定');
        break;

      case UNBOUND: // 未绑定
        break;

      default: // 状态异常
        $this->ajaxReturn(500, '企业微信绑定状态异常');
        break;
    }

    $state = randstr(36, false);
    $adminToken = Request::instance()->header('admintoken', '');
    cache($state, $adminToken, 1800);
    $oauth = new Oauth($this->corpId, $this->corpSecret);
    $redirect_url = config('global_config.sitedomain') . '/index.php?s=apiadmin/corpwechat/System/authorizeRedirect';
    $code = $oauth->qrConnect($redirect_url, $this->agentId, $state);

    if (false === $code) {
      $this->ajaxReturn(500, $oauth->getError());
    } else {
      if (isset($code) && !empty($code)) {
        $this->ajaxReturn(200, 'SUCCESS', $code);
      } else {
        $this->ajaxReturn(500, '请求失败，请稍后重新尝试');
      }
    }
  }


  /** 授权后重定向
   * @Method redirect()
   *
   * @param null
   *
   * @return Jsonp
   *
   * @throws null
   *
   * @link XXXXXXXXXX
   *
   * @author  Administrator
   * @version 1.1
   * @since   2022/2/28
   */
  public function authorizeRedirect() {
    // 接收回调参数
    $input_data = [
      'code' => input('get.code/s', '', 'trim'),
      'state' => input('get.state/s', '', 'trim'),
      'appid' => input('get.appid/s', '', 'trim'),
    ];
    cache('gey', $input_data);

    // Validate验证规则
    $rule = [
      'code' => 'require|alphaDash',
      'state' => 'require',
      'appid' => 'require|alphaNum'
    ];

    // Validate报错信息
    $msg = [
      'code.require' => '缺少参数',
      'code.alphaDash' => '参数错误',
      'state.require' => '缺少参数',
      'appid.require' => '缺少参数',
      'appid.alphaNum' => '参数错误',
    ];

    // 实例化验证类
    $validate = new Validate($rule, $msg);
    if (!$validate->check($input_data)) {
      $this->error($validate->getError(), '/qw_redirect.html');
    }

    $admin_token = cache($input_data['state']);
    if (null === $admin_token) {
      $this->error('code错误', '/qw_redirect.html');
    }

    $auth_result = $this->auth($admin_token);
    if ($auth_result['code'] != 200) {
      $this->error($auth_result['info'], '/qw_redirect.html');
    }

    $adminInfo = model('Admin')->where(['id' => $auth_result['info']->id])->find();
    if (!$adminInfo) {
      $this->ajaxReturn(50001, '没有找到用户信息');
    } else {
      $this->admininfo = new Admininfo($adminInfo);
    }

    $oauth = new Oauth($this->corpId, $this->corpSecret);
    $result = $oauth->userInfo($input_data['code']);
    cache('gey_result', $result);

    if (false === $result) {
      $this->error($oauth->getError(), '/qw_redirect.html');
    }

    if (!isset($result['UserId']) || empty($result['UserId'])) {
      $this->error('企业微信绑定失败', '/qw_redirect.html');
    }

    //检测企业微信成员UserID是否存在
    $is_exist = $this->checkUserIdIsBInd($result['UserId']);
    if ($is_exist) {
      $this->error('该企业微信已占用', '/qw_redirect.html');
    }

    // 调用企业微信获取【读取成员】API
    $corpUser = new User($this->corpId, $this->corpSecret);
    $user_info = $corpUser->UserGet($result['UserId']);

    if (false === $user_info) {
      $this->error($oauth->getError(), '/admin/#/sys/basic/config');
    }

    if (!isset($user_info) || empty($user_info)) {
      $this->error('企业微信信息获取失败', '/qw_redirect.html');
    }

    Db::startTrans();
    try {
      // 1.更新`admin`表
      $admin_result = model('Admin')
        ->allowField(true)
        ->isUpdate()
        ->save(
          [
            'bind_qywx' => 1,
            'qy_userid' => $result['UserId'],
            'bind_qywx_time' => time()
          ],
          ['id' => $this->admininfo->id]
        );
      if (false === $admin_result) {
        $this->error(model('Admin')->getError(), '/qw_redirect.html');
      }

      // 2.写入`CorpwechatStaff`表
      $staff_info = [
        'adminid' => $this->admininfo->id,
        'userid' => $user_info['userid'],
        'name' => $user_info['name'],
        'department' => $user_info['department'],
        'mobile' => $user_info['mobile'],
        'gender' => $user_info['gender'],
        'email' => $user_info['email'],
        'avatar' => $user_info['avatar'],
        'status' => $user_info['status'],
        'qr_code' => $user_info['qr_code'],
        'alias' => $user_info['alias'],
        'thumb_avatar' => $user_info['thumb_avatar'],
        'biz_mail' => $user_info['biz_mail'],
        'is_bind' => 1,
        'admin_id' => $this->admininfo->id,
        'bind_time' => time(),
      ];
      $staff_result = model('corpwechat.CorpwechatStaff')
        ->writeStaff($user_info['userid'], $staff_info);
      if (false === $staff_result) {
        $this->error(model('corpwechat.CorpwechatStaff')->getError(), '/qw_redirect.html');
      }

      // 3.写入`CorpwechatUserAll`
      $user_all_info = [
        'userid' => $user_info['userid'],
        'name' => $user_info['name'],
        'user_type' => 1,
        'register' => 5,
        'avatar' => $user_info['avatar'],
        'thumb_avatar' => $user_info['thumb_avatar'],
        'mobile' => $user_info['mobile'],
        'gender' => $user_info['gender']
      ];
      $user_all_result = model('corpwechat.CorpwechatUserAll')
        ->writeUserAll($user_info['userid'], 1, $user_all_info);
      if (false === $user_all_result) {
        $this->error(model('corpwechat.CorpwechatUserAll')->getError(), '/qw_redirect.html');
      }

      // 4.写入`log`表日志
      $log_result = model('AdminLog')->record(
        '绑定企业微信，企业微信【UserId - ' . $result['UserId'] . '】',
        $this->admininfo
      );
      if (false === $log_result) {
        $this->error(model('AdminLog')->getError(), '/qw_redirect.html');
      }

      // 提交事务
      Db::commit();
    } catch (\Exception $e) {
      // 回滚事务
      Db::rollBack();
      $this->error($e->getMessage(), '/qw_redirect.html');
    }

    $this->success('企业微信绑定成功', '/qw_redirect.html');
  }


  /** 企业微信回调
   * @Method callBack()
   *
   * @param null
   *
   * @return Jsonp
   *
   * @throws null
   *
   * @link XXXXXXXXXX
   *
   * @author  Administrator
   * @version 1.1
   * @since   2022/2/23
   */
  public function callBack() {
    cache('call_back_new', date('Y-m-d H:i:s'));

    if (request()->isGet()) {
      cache('call_back_get', input('get.'));
      /**
       * 企业微信加密签名
       * @var string
       */
      $sVerifyMsgSig = input('get.msg_signature', '');
      /**
       * 时间戳
       * @var integer
       */
      $sVerifyTimeStamp = input('get.timestamp', '');
      /**
       * 随机数
       * @var string
       */
      $sVerifyNonce = input('get.nonce', '');
      /**
       * 加密的字符串
       * @var string
       */
      $sVerifyEchoStr = input('get.echostr', '');

      /**
       * 需要返回的明文
       * @var string
       */
      $sEchoStr = '';
      $wxBizMsgCrypt = new WXBizMsgCrypt($this->token, $this->EncodingAESKey, $this->corpId);
      $errCode = $wxBizMsgCrypt->VerifyURL($sVerifyMsgSig, $sVerifyTimeStamp, $sVerifyNonce, $sVerifyEchoStr, $sEchoStr);

      if ($errCode === 0) {
        die($sEchoStr);
      } else {
        cache('error', $errCode);
        print("Err: " . $errCode . "\n\n");
      }
    } elseif (request()->isPost()) {
      $sReqMsgSig = input('get.msg_signature', 'trim');
      $sReqTimeStamp = input('get.timestamp', 'trim');
      $sReqNonce = input('get.nonce', 'trim');
      $sReqData = file_get_contents('php://input');
      cache('call_back_input', input());
      cache('xml', $sReqData);
      /**
       * 解析之后的明文
       * @var string
       */
      $sMsg = "";
      $wxBizMsgCrypt = new WXBizMsgCrypt($this->token, $this->EncodingAESKey, $this->corpId);
      $errCode = $wxBizMsgCrypt->DecryptMsg($sReqMsgSig, $sReqTimeStamp, $sReqNonce, $sReqData, $sMsg);
      if ($errCode == 0) {
        // 解密成功，sMsg即为xml格式的明文
        $decryptMsg = Utils::Xml2Array($sMsg);
        cache('decryptMsg', $decryptMsg);
        if ($decryptMsg) {
          switch ($decryptMsg['MsgType']) {
            case 'event':
              DecryMsg::event($decryptMsg);
              break;

            default:
              die('error MsgType');
              break;
          }
        }
        die($sMsg);
      } else {
        cache('error_code', $errCode);
        die('error');
      }
    } else {
      cache('call_back_error', 'Err: 403 forbidden');
      die("Err: 403 forbidden\n\n");
    }
  }


  /** 检测企业微信成员UserID是否存在
   * @Method checkUserIdIsBInd()
   *
   * @param string $userId 企业微信UserID
   *
   * @return bool
   *
   * @author  Administrator
   * @version 1.1
   * @since   2022/3/8
   */
  private function checkUserIdIsBInd($userId) {
    $admin = model('Admin')
      ->where('bind_qywx', 1)
      ->where('qy_userid', $userId)
      ->find();

    $staff = model('corpwechat.CorpwechatStaff')
      ->where('userid', $userId)
      ->where('is_bind', 1)
      ->where('admin_id', '<>', 0)
      ->find();

    if (null === $admin && null === $staff) {
      return false;
    } else {
      return true;
    }
  }
}
