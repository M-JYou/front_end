<?php

namespace app\apiadmin\controller\corpwechat;

use app\common\controller\Backend;
use app\common\lib\corpwechat\ExternalContact;
use think\Db;
use think\Exception;
use think\Validate;

define('TEXT_TYPE', 1); // 纯文本-附件类型-text
define('IMAGE_TYPE', 2); // 图片-附件类型-image
define('LINK_TYPE', 3); // 链接-附件类型-link

class MsgTemplate extends Backend {
  /** 企业ID
   * @var string
   */
  private $corpId = '';

  /** 应用ID
   * @var string
   */
  private $agentId = '';

  /** 应用的凭证密钥
   * @var string
   */
  private $corpSecret = '';

  /** 通讯录的凭证秘钥
   * @var string
   */
  private $customerContactSecret = '';


  public function _initialize() {
    parent::_initialize(); // TODO: Change the autogenerated stub
    // if (1 != $this->admininfo->bind_qywx || empty($this->admininfo->qy_userid)) {
    // $this->ajaxReturn(500, '请先绑定企业微信');
    // }

    $apiConfig = config('global_config.corpwechat_api');
    if (empty($apiConfig) || !isset($apiConfig) || !is_array($apiConfig)) {
      $this->ajaxReturn(500, '请先配置企业微信');
    }

    $is_open = $apiConfig['is_open'] ? intval($apiConfig['is_open']) : -1;

    switch ($is_open) {
      case 1:
        $this->corpId = $apiConfig['corpid'] ? $apiConfig['corpid'] : '';
        $this->agentId = $apiConfig['agentid'] ? $apiConfig['agentid'] : '';
        $this->corpSecret = $apiConfig['corpsecret'] ? $apiConfig['corpsecret'] : '';
        $this->customerContactSecret = $apiConfig['customer_contact_secret'] ? $apiConfig['customer_contact_secret'] : '';
        $this->token = $apiConfig['token'] ? $apiConfig['token'] : '';
        $this->EncodingAESKey = $apiConfig['encoding_ase_key'] ? $apiConfig['encoding_ase_key'] : '';
        break;

      default:
        $this->ajaxReturn(500, '请先开启企业微信');
    }
  }


  /** 新建推送
   * @Method sendMsgTemplate()
   *
   * @param string $title 推送任务名称
   * @param string $chat_type 群发任务的类型[single(默认):客户，group:客户群]
   * @param array $external_userids 群发联系人
   * @param array $text_content 消息文本内容-群发语
   * @param integer $type 附件类型[1:text;2:image;3:link;]
   * @param string $pic_url 2:image.图片的链接
   * @param string $link_title 3:link.图文消息标题
   * @param string $link_picurl 3:link.图文消息封面的url
   * @param string $link_desc 3:link.图文消息的描述
   * @param string $link_url 3:link.图文消息的链接
   *
   * @return Jsonp
   *
   * @throws null
   *
   * @link XXXXXXXXXX
   *
   * @author  Administrator
   * @version 1.1
   * @since   2022/3/7
   */
  public function sendMsgTemplate() {
    // 1.接收请求参数
    $input_data = [
      // 推送任务名称
      'title' => input('post.title/s', '', 'trim'),
      // 群发任务的类型[single(默认):客户，group:客户群]
      'chat_type' => input('post.chat_type/s', 'single', 'trim'),
      // 群发联系人
      'external_userids' => input('post.external_userids/a', []),
      // 消息文本内容-群发语
      'text_content' => input('post.text_content/s', '', 'trim'),
      // 附件类型[1:text;2:image;3:link;]
      'type' => input('post.type/d'),
      // 2:image.图片的链接
      'pic_url' => input('post.pic_url/s', '', 'trim'),
      // 3:link.链接形式[1:内链;2:外链]
      'link_form' => input('post.link_form/d', 0, 'intval'),
      // 3:link.链接类型
      'link_type' => input('post.link_type/s', '', 'trim'),
      // 3.link.link_form=1:内链ID[link_form=1时生效]
      'inner_id' => input('post.inner_id/d', 0, 'intval'),
      // 3.link.link_form=1:内链名称[link_form=1时生效]
      'inner_name' => input('post.inner_name/s', '', 'trim'),
      // 3:link.图文消息标题
      'link_title' => input('post.link_title/s', '', 'trim'),
      // 3:link.图文消息封面的url
      'link_picurl' => input('post.link_picurl/s', '', 'trim'),
      // 3:link.图文消息的描述
      'link_desc' => input('post.link_desc/s', '', 'trim'),
      // 3:link.图文消息的链接
      'link_url' => input('post.link_url/s', '', 'trim')
    ];

    // 2.验证规则
    $rule = [
      'title' => 'require|length:1,50',
      'external_userids' => 'require|array|min:1',
      'text_content' => 'require|length:1,200',
      'chat_type' => 'require|in:single,group',
      'type' => 'require|in:1,2,3'
    ];

    // 3.推送消息模板
    $send = [
      'chat_type' => $input_data['chat_type'],
      'text' => ['content' => $input_data['text_content']],
    ];

    // 2.1/3.1
    switch ($input_data['chat_type']) {
      case 'single':
        $send['external_userid'] = $input_data['external_userids'];
        $total_num = count($input_data['external_userids']);
        break;
      case 'group':
        $send['sender'] = $this->admininfo->qy_userid;
        $input_data['sender'] = $this->admininfo->qy_userid;
        $total_num = 0;
        break;
      default:
        $this->ajaxReturn(500, '错误的群发任务的类型');
        break;
    }

    // 2.2/3.2根据附件类型验证参数以及推送消息模板
    switch ($input_data['type']) {
      case TEXT_TYPE: // 纯文本
        break;

      case IMAGE_TYPE: // 图片
        $rule['pic_url'] = 'require|url';
        $send['attachments'][] = [
          'msgtype' => 'image',
          'image' => [
            'pic_url' => $input_data['pic_url'] ? $input_data['pic_url'] : ''
          ]
        ];
        break;

      case LINK_TYPE: // 链接
        switch ($input_data['link_form']) {
          case 1:
            $input_data['link_url'] = model('corpwechat.CorpwechatWelcomeWords')
              ->innerLinkInfo($input_data['link_type'], $input_data['inner_id']);
            if (false === $input_data['link_url']) {
              $this->ajaxReturn(500, model('corpwechat.CorpwechatWelcomeWords')->getErrorMessage());
            }
            break;

          case 2:
            break;

          default:
            $this->ajaxReturn(500, '请正确选择欢迎语内链形式');
            break;
        }
        $rule['link_title'] = 'require|length:1,50';
        $rule['link_picurl'] = 'url';
        $rule['link_desc'] = 'length:0,200';
        $rule['link_url'] = 'require|url';
        $send['attachments'][] = [
          'msgtype' => 'link',
          'link' => [
            "title" => $input_data['link_title'] ? $input_data['link_title'] : '',
            "picurl" => $input_data['link_picurl'] ? $input_data['link_picurl'] : '',
            "desc" => $input_data['link_desc'] ? $input_data['link_desc'] : '',
            "url" => $input_data['link_url'] ? $input_data['link_url'] : ''
          ]
        ];
        break;

      default:
        $this->ajaxReturn(500, '请正确选择欢迎语附件类型');
    }

    // 2.3验证错误提示信息
    $msg = [
      'title.require' => '请输入推送任务名称',
      'title.length' => '推送任务名称长度为1~50',
      'chat_type.require' => '缺少推送任务的类型',
      'chat_type.in' => '推送任务的类型错误',
      'user_ids.require' => '请选择推送成员',
      'user_ids.array' => '请正确选择推送成员',
      'user_ids.min' => '请至少选择一个推送成员',
      'text_content.require' => '请输入群发语',
      'text_content.length' => '群发语长度为1~200',
      'type.require' => '请选择附件类型',
      'type.in' => '请选择正确的附件类型',
      'pic_url.require' => '请上传推送图片',
      'pic_url.url' => '请上传正确的推送图片',
      'link_title.require' => '请输入推送链接标题',
      'link_title.length' => '推送链接标题长度为1~50',
      'link_picurl.url' => '请上传正确的推送链接封面',
      'link_desc.length' => '推送链接的描述长度为0~200',
      'link_url.require' => '请填写推送链接',
      'link_url.url' => '请填写正确的推送链接'
    ];

    // 2.4调用验证器
    $validate = new Validate($rule, $msg);
    if (!$validate->check($input_data)) {
      $this->ajaxReturn(500, $validate->getError());
    }

    // 3.3调用企业微信 - 创建企业群发API
    $externalContact = new ExternalContact($this->corpId, $this->corpSecret);
    $result = $externalContact->addMsgTemplate($send);

    if (false === $result) {
      $this->ajaxReturn(500, $externalContact->getError());
    }

    // 开启事务
    Db::startTrans();
    try {
      $push_log_data = array();
      // 写入新欢迎语
      $fail_num = count($result['fail_list']);
      if (0 < $fail_num) {
        $fail_list = $result['fail_list'];
        // 推送失败日志
        foreach ($fail_list as $key => $fail) {
          $push_log_data[] = [
            'external_user_id' => $fail,
            'content' => '推送失败',
            'msgId' => $result['msgid'],
            'type' => 2
          ];
        }

        $update_fail_result = model('corpwechat.CorpwechatUserAll')
          ->where('userid', 'IN', $fail_list)
          ->setInc('push_fail');
        if (false === $update_fail_result) {
          throw new \Exception(model('corpwechat.CorpwechatUserAll')->getError());
        }
      } else {
        $fail_list = array();
      }
      $input_data['fail_list'] = $fail_list;
      $input_data['msgId'] = $result['msgid'];
      $input_data['total_num'] = $total_num;
      $input_data['fail_num'] = $fail_num;
      $input_data['success_num'] = intval($total_num - $fail_num);
      $insert_result = model('corpwechat.CorpwechatMsgTemplate')
        ->allowField(true)
        ->save($input_data);
      if (false === $insert_result) {
        throw new \Exception(model('corpwechat.CorpwechatMsgTemplate')->getError());
      }

      // 推送日志
      // 创建推送日志
      foreach ($send['external_userid'] as $userid) {
        $push_log_data[] = [
          'external_user_id' => $userid,
          'content' => '创建推送',
          'msgId' => $result['msgid'],
          'type' => 3
        ];
      }
      $update_total_result = model('corpwechat.CorpwechatUserAll')
        ->where('userid', 'IN', $send['external_userid'])
        ->setInc('push_total');
      if (false === $update_total_result) {
        throw new \Exception(model('corpwechat.CorpwechatUserAll')->getError());
      }
      // 推送成功日志
      $push_success = array_diff($send['external_userid'], $fail_list);
      foreach ($push_success as $success) {
        $push_log_data[] = [
          'external_user_id' => $success,
          'content' => '推送成功',
          'msgId' => $result['msgid'],
          'type' => 1
        ];
      }
      $update_success_result = model('corpwechat.CorpwechatUserAll')
        ->where('userid', 'IN', $push_success)
        ->setInc('push_success');
      if (false === $update_success_result) {
        throw new \Exception(model('corpwechat.CorpwechatUserAll')->getError());
      }
      $log_result = model('corpwechat.CorpwechatPushLog')
        ->allowField(true)
        ->isUpdate(false)
        ->saveAll($push_log_data);
      if (false === $log_result) {
        throw new \Exception(model('corpwechat.CorpwechatPushLog')->getError());
      }

      // 后台`Admin日志`
      $log_result = model('AdminLog')->record(
        '创建企微消息推送【msgId:' . $result['msgid'] . '】',
        $this->admininfo
      );
      if (false === $log_result) {
        throw new \Exception(model('AdminLog')->getError());
      }

      // 提交事务
      Db::commit();
    } catch (\Exception $e) {
      // 回滚事务
      Db::rollBack();
      $this->ajaxReturn(500, $e->getMessage());
    }

    $this->ajaxReturn(200, '新建推送成功');
  }

  /** 消息推送 - 列表页
   * @Method index()
   *
   * @param integer $page_num 当前页
   * @param integer $page_size 每页显示条数
   * @param string $keyword 关键字检索[群发任务名称]
   * @param integer $type 附件类型[1:text;2:image;3:link;]
   *
   * @return Jsonp
   *
   * @throws null
   *
   * @link XXXXXXXXXX
   *
   * @author  Administrator
   * @version 1.1
   * @since   2022/3/3
   */
  public function index() {
    $map = array(); // 查询条件

    // 1.关键字
    $keyword = input('post.keyword/s', '', 'trim');
    if (isset($keyword) && !empty($keyword)) {
      // 关键字检索[群发任务名称]
      $map['title'] = ['like', '%' . $keyword . '%'];
    }

    // 2.附件类型查询
    $type = input('post.type/d', 0, 'intval');
    switch ($type) {
      case 1:
      case 2:
      case 3:
        $map['type'] = ['=', $type];
        break;
    }

    $order = ['id desc'];
    $page_num = input('post.page_num/d', 1, 'intval');
    $page_size = input('post.page_size/d', 10, 'intval');

    #  获取字段
    $field = 'id as template_id, title, type, create_time, total_num, fail_num, success_num, send_fail, send_success, msgId';
    $list = model('corpwechat.CorpwechatMsgTemplate')->getList($map, $order, $page_num, $page_size, $field);

    $this->ajaxReturn(200, 'SUCCESS', $list);
  }


  /** 消息推送 - 任务详情
   * @Method details()
   *
   * @param integer $template_id 推送任务ID
   *
   * @return Jsonp
   *
   * @throws \think\db\exception\DataNotFoundException
   * @throws \think\db\exception\ModelNotFoundException
   * @throws \think\exception\DbException
   *
   * @link XXXXXXXXXX
   *
   * @author  Administrator
   * @version 1.1
   * @since   2022/3/7
   */
  public function details() {
    $template_id = input('post.template_id/d', 0, 'intval');

    if (!isset($template_id) || empty($template_id)) {
      $this->ajaxReturn(500, '请选择要查看的推送任务');
    }

    $details = model('corpwechat.CorpwechatMsgTemplate')->find($template_id);

    if (!isset($template_id) || empty($template_id)) {
      $this->ajaxReturn(500, '推送任务不存在');
    } else {
      $details = $details->toArray();
      $this->ajaxReturn(200, 'SUCCESS', $details);
    }
  }


  public function searchExternal() {
    $search_type = input('post.search_type/d', 0, 'intval');
    $login = input('post.login/d', 0, 'intval');
    switch ($login) {
      case 0:
        $login_day = 0;
        break;

      case 1:
        $login_day = 7;
        break;

      case 2:
        $login_day = 30;
        break;

      default:
        $this->ajaxReturn(500, '登录筛选条件错误');
        break;
    }

    // 用户选择条件[1:按单人选择;2:按标签选择;3:按简历条件选择;]
    switch ($search_type) {
      case 1;
        // 1.按单人选择
        $keyword = input('post.keyword/s', '', 'trim');
        if (isset($keyword) && !empty($keyword)) {
          $return = $this->_keywordSearch($keyword, $login_day);
        } else {
          $this->ajaxReturn(500, '请输入需要查询用户的关键词');
        }
        break;

      case 2;
        // 2.按标签选择
        $tag_name = input('post.tag_name/s', '', 'trim');
        $tag_id = input('post.tag_id/s', '', 'trim');
        if (isset($tag_name) && !empty($tag_name)) {
          $return = $this->_tagsSerrch($tag_name, $tag_id, $login_day);
        } else {
          $this->ajaxReturn(500, '请选择筛选的标签');
        }
        break;

      case 3;
        // 3.按简历条件选择
        $return = $this->_resumeSerrch($login_day);
        break;

      default:
        // 错误的用户选择条件
        $this->ajaxReturn(500, '用户选择条件错误');
        break;
    }

    $this->ajaxReturn(200, 'SUCCESS', $return);
  }


  /** 按关键字单人选择客户
   * @Method _keywordSearch()
   *
   * @param string $keyword 关键字检索[外部联系人名称|手机号|企业的名称/简称]
   *
   * @return array
   *
   * @author  Administrator
   * @version 1.1
   * @since   2022/3/24
   */
  public function _keywordSearch($keyword, $loginDay = 0) {

    $query = model('corpwechat.CorpwechatExternalUser')
      ->alias('e')
      ->join('corpwechat_user_all u', 'u.userid = e.external_user_id', 'LEFT')
      ->join('member_bind mb', 'mb.unionid = u.unionid', 'LEFT')
      ->join('member m', 'm.uid = mb.uid', 'LEFT')
      ->where('u.name|u.corp_name|u.corp_full_name|m.mobile', 'like', "%{$keyword}%")
      ->group('e.external_user_id')
      ->order('e.id DESC')
      ->field("e.external_user_id, u.name, u.thumb_avatar, u.push_total, u.push_fail, u.push_success, IFNULL(m.username,'非平台用户') as username");
    if (isset($loginDay) && !empty($loginDay)) {
      $query->join('member_action_log mal', 'mal.uid = m.uid', 'LEFT')
        ->where('mal.is_login', 1)
        ->whereTime('addtime', "-{$loginDay} days");
    }
    $list = $query->select();

    if (null === $list) {
      return array();
    } else {
      return $list->toArray();
    }
  }


  /** 按标签选择客户
   * @Method _tagsSerrch()
   *
   * @param string $tagName 客户标签/标签组名称
   * @param string $tagId 客户标签ID[空:为标签组筛选;非空:标签筛选;]
   *
   * @return array
   *
   * @author  Administrator
   * @version 1.1
   * @since   2022/3/24
   */
  public function _tagsSerrch($tagName, $tagId = '', $loginDay) {
    // 3.客户标签
    if (isset($tagId) && !empty($tagId)) {
      // 标签
      $map['e.tags$."' . $tagName . '"'] = ['=', $tagId];
    } else {
      // 标签组
      $map['e.tag_group$."' . $tagName . '"'] = ['=', $tagName];
    }

    $query = model('corpwechat.CorpwechatExternalUser')
      ->alias('e')
      ->join('corpwechat_user_all u', 'u.userid = e.external_user_id', 'LEFT')
      ->join('member_bind mb', 'mb.unionid = u.unionid', 'LEFT')
      ->join('member m', 'm. uid = mb.uid', 'LEFT')
      ->where($map)
      ->group('e.external_user_id')
      ->order('e.id DESC')
      ->field("e.external_user_id, u.name, u.thumb_avatar, u.push_total, u.push_fail, u.push_success, IFNULL(m.username,'非平台用户') as username");
    if (isset($loginDay) && !empty($loginDay)) {
      $query->join('member_action_log mal', 'mal.uid = m.uid', 'LEFT')
        ->where('mal.is_login', 1)
        ->whereTime('addtime', "-{$loginDay} days");
    }
    $list = $query->select();

    if (null === $list) {
      return array();
    } else {
      return $list->toArray();
    }
  }


  /** 按简历条件选择客户
   * @Method _resumeSerrch()
   *
   * @param integer $sex 性别[1:男;2:女;]
   * @param integer $experience 工作经验[1:无经验/应届生;2:1年;3:2年;4:3年;5:3-5年;6:5-10年;7:10年以上]
   * @param integer $education 3.学历[1:初中;2:高中;3:中技;4:中专;5:大专;6:本科;7:硕士;8:博士;9:博后;]
   * @param integer $min_age 最小年龄[16~20;20~30;30~40;40~50:50-]
   * @param integer $max_age 最大年龄[16~20;20~30;30~40;40~50:50-]
   * @param integer $category1 期望职位1级分类ID
   * @param integer $category2 期望职位2级分类ID
   * @param integer $category3 期望职位3级分类ID
   *
   * @return array
   *
   * @author  Administrator
   * @version 1.1
   * @since   2022/3/25
   */
  public function _resumeSerrch($loginDay) {
    $map = array();

    // 1.性别
    $sex = input('post.sex/d', 0, 'intval');
    if (isset($sex) && !empty($sex)) {
      $map['rsr.sex'] = ['=', $sex];
    }

    // 2.工作经验[1:无经验/应届生;2:1年;3:2年;4:3年;5:3-5年;6:5-10年;7:10年以上]
    $experience = input('post.experience/d', 0, 'intval');
    if (isset($experience) && !empty($experience)) {
      switch ($experience) {
        case 1:
          //无经验/应届生
          $map['rsr.enter_job_time'] = ['=', 0];
          break;

        case 2:
          // 1年
          $map['rsr.enter_job_time'] = ['>', strtotime('-2 year')];
          break;

        case 3:
          // 2年
          $map['rsr.enter_job_time'] = ['BETWEEN', [strtotime('-3 year'), strtotime('-2 year')]];
          break;

        case 4:
          // 3年
          $map['rsr.enter_job_time'] = ['BETWEEN', [strtotime('-4 year'), strtotime('-3 year')]];
          break;

        case 5:
          // 3~5年
          $map['rsr.enter_job_time'] = ['BETWEEN', [strtotime('-5 year'), strtotime('-3 year')]];
          break;

        case 6:
          // 5~10年
          $map['rsr.enter_job_time'] = ['BETWEEN', [strtotime('-10 year'), strtotime('-5 year')]];
          break;

        case 7:
          // 10年以上
          $map['rsr.enter_job_time'] = ['<=', strtotime('-10 year')];
          break;

        default:
          break;
      }
    }


    // 3.学历[1:初中;2:高中;3:中技;4:中专;5:大专;6:本科;7:硕士;8:博士;9:博后;]
    $education = input('post.education/d', 0, 'intval');
    if (isset($education) && !empty($education)) {
      $map['rsr.education'] = ['=', $education];
    }

    // 4.年龄[16~20;20~30;30~40;40~50:50-]
    $min_age = input('min_age/d', 0, 'intval');
    $max_age = input('max_age/d', 0, 'intval');
    if (isset($min_age) && !empty($min_age)) {
      if (isset($max_age) && !empty($max_age)) {
        $map['rsr.birthyear'] = ['BETWEEN', [(date('Y') - $max_age), (date('Y') - $min_age)]];
      } else {
        $map['rsr.birthyear'] = ['<=', (date('Y') - $min_age)];
      }
    }

    // 5.期望职位
    $category1 = input('post.category1/d', 0, 'intval');
    if (isset($category1) && !empty($category1)) {
      $map['ri.category1'] = ['=', $category1];
    }
    $category2 = input('post.category2/d', 0, 'intval');
    if (isset($category2) && !empty($category2)) {
      $map['ri.category2'] = ['=', $category2];
    }
    $category3 = input('post.category3/d', 0, 'intval');
    if (isset($category3) && !empty($category3)) {
      $map['ri.category3'] = ['=', $category3];
    }

    // 6.注册来源
    $platform = input('post.platform/s', '', 'trim');
    if (isset($platform) && !empty($platform)) {
      $map['m.platform'] = ['=', $platform];
    }

    $query = model('corpwechat.CorpwechatExternalUser')
      ->alias('e')
      ->join('corpwechat_user_all u', 'u.userid = e.external_user_id', 'LEFT')
      ->join('member_bind mb', 'mb.unionid = u.unionid', 'LEFT')
      ->join('member m', 'm.uid = mb.uid', 'LEFT')
      ->join('resume_search_rtime rsr', 'rsr.uid = mb.uid', 'LEFT')
      ->join('resume_intention ri', 'rsr.uid = mb.uid', 'LEFT')
      ->where('rsr.id', 'NOT NULL')
      ->where($map)
      ->group('e.external_user_id')
      ->order('e.id DESC')
      ->field("e.external_user_id, u.name, u.thumb_avatar, u.push_total, u.push_fail, u.push_success, IFNULL(m.username,'非平台用户') as username");
    if (isset($loginDay) && !empty($loginDay)) {
      $query->join('member_action_log mal', 'mal.uid = m.uid', 'LEFT')
        ->where('mal.is_login', 1)
        ->whereTime('addtime', "-{$loginDay} days");
    }
    $list = $query->select();

    if (null === $list) {
      return array();
    } else {
      return $list->toArray();
    }
  }


  /** 同步推送任务数据
   * @Method synchronization()
   *
   * @param integer $template_id 推送任务ID
   *
   * @return Jsonp
   *
   * @throws null
   *
   * @link {domain}corpwechat/group_chat/synchronization
   *
   * @author  Administrator
   * @version 1.1
   * @since   2022/3/22
   */
  public function synchronization() {
    $template_id = input('post.template_id/d', 0, 'intval');

    if (!isset($template_id) || empty($template_id)) {
      $this->ajaxReturn(500, '请选择要同步的推送任务');
    }

    $apiConfig = config('global_config.corpwechat_api');
    if (empty($apiConfig) || !isset($apiConfig) || !is_array($apiConfig)) {
      $this->ajaxReturn(500, '请先完成企业微信配置');
    }

    $msgId = model('corpwechat.CorpwechatMsgTemplate')
      ->where('id', $template_id)
      ->value('msgId');
    if (!isset($msgId) || empty($msgId)) {
      $this->ajaxReturn(500, '缺少企业群发消息的id');
    }

    $is_open = isset($apiConfig['is_open']) ? intval($apiConfig['is_open']) : -1;

    switch ($is_open) {
      case 1:
        $this->corpId = isset($apiConfig['corpid']) ? $apiConfig['corpid'] : '';
        $this->corpSecret = isset($apiConfig['corpsecret']) ? $apiConfig['corpsecret'] : '';
        break;

      default:
        $this->ajaxReturn(500, '请先开启企微服务');
    }
    /** 1.根据客户群ID调用企业微信【API】获取客户群详情 */
    $task_cursor = '';
    $externalContact = new ExternalContact($this->corpId, $this->corpSecret);
    $send_total = 0; // 发送总数
    $send_fail = 0; // 发送失败总数
    $send_success = 0; // 发送成功总数
    $send_log_result = [];
    do {
      $task_query = [
        'msgid' => $msgId,
        'limit' => 1000,
        'cursor' => $task_cursor
      ];
      $task_result = $externalContact->getGroupmsgTask($task_query);
      if (false === $task_result) {
        // 企业微信【API】调用失败
        $this->ajaxReturn(500, $externalContact->getError());
      }

      $task_list = $task_result['task_list'];
      foreach ($task_list as $task) {
        $send_cursor = '';
        do {
          $send_query = [
            'msgid' => $msgId,
            'userid' => $task['userid'],
            'limit' => 1000,
            'cursor' => $send_cursor
          ];
          $send_result = $externalContact->getGroupmsgSendResult($send_query);
          if (false === $send_result) {
            // 企业微信【API】调用失败
            $this->ajaxReturn(500, $externalContact->getError());
          }
          $send_list = $send_result['send_list'];
          foreach ($send_list as $key => $send) {
            $send_log_result[$key] = [
              'external_user_id' => $send['external_userid'],
              'userid' => $send['userid'],
              'msgId' => $msgId,
              'type' => 4,
              'status' => $send['status'],
              'send_time' => isset($send['send_time']) ? $send['send_time'] : 0
            ];
            $send_total += 1; // 发送总数+1
            switch ($send['status']) {
              case 0:
                $send_log_result[$key]['content'] = '未发送';
                break;
              case 1:
                $send_log_result[$key]['content'] = '已发送';
                $send_success += 1; // 发送成功数+1
                break;
              case 2:
                $send_log_result[$key]['content'] = '因客户不是好友导致发送失败';
                $send_fail += 1; // 发送失败数+1
                break;
              case 3:
                $send_log_result[$key]['content'] = '因客户已经收到其他群发消息导致发送失败';
                $send_fail += 1; // 发送失败数+1
                break;
              default:
                $send_log_result[$key]['content'] = '未知';
                break;
            }
          }
          $send_cursor = isset($send_result['next_cursor']) ? $send_result['next_cursor'] : '';
        } while (!empty($send_cursor));
      }

      $task_cursor = isset($task_result['next_cursor']) ? $task_result['next_cursor'] : '';
    } while (!empty($task_cursor));

    try {
      // 更新推送任务数据`corpwechat_msg_template`
      $msg_result = model('corpwechat.CorpwechatMsgTemplate')
        ->allowField(true)
        ->isUpdate(true)
        ->save(
          [
            'send_total' => $send_total,
            'send_fail' => $send_fail,
            'send_success' => $send_success,
          ],
          [
            'id' => $template_id,
            'msgId' => $msgId
          ]
        );
      if (false === $msg_result) {
        throw new \Exception(model('corpwechat.CorpwechatMsgTemplate')->getError());
      }

      // 删除旧日志记录
      $log_del = model('corpwechat.CorpwechatPushLog')
        ->where('msgId', $msgId)
        ->where('type', 4)
        ->delete();
      if (false === $log_del) {
        throw new \Exception(model('corpwechat.CorpwechatPushLog')->getError());
      }

      // 删除旧日志记录
      $log_insert = model('corpwechat.CorpwechatPushLog')
        ->allowField(true)
        ->isUpdate(false)
        ->saveAll($send_log_result);
      if (false === $log_insert) {
        throw new \Exception(model('corpwechat.CorpwechatPushLog')->getError());
      }

      $this->ajaxReturn(200, '同步成功');
    } catch (Exception $e) {
      $this->ajaxReturn(500, '同步失败', ['errorMessage' => $e->getMessage()]);
    }
  }


  /** 查看消息推送结果
   * @Method resultList()
   *
   * @param integer $template_id 推送任务ID
   * @param string $key 结果查看类型[push:推送结果;send:发送结果]
   * @param integer $page_num 当前页（默认：1）
   * @param integer $page_size 每页显示条数（默认：10）
   * @param string $keyword 关键字检索[企微客户名字]
   * @param integer $type 推送结果[0:全部（默认）;2:推送失败;3:推送成功;]【key=push有效】
   * @param integer $status 发送状态[0:未发送;1:已发送;2:因客户不是好友导致发送失败;3:因客户已经收到其他群发消息导致发送失败;4:全部（默认）]【key=send有效】
   *
   * @return Jsonp
   *
   * @throws null
   *
   * @link {domain}corpwechat/group_chat/resultList
   *
   * @author  Administrator
   * @version 1.1
   * @since   2022/3/30
   */
  public function resultList() {
    $template_id = input('post.template_id/d', 0, 'intval');
    if (!isset($template_id) || empty($template_id)) {
      $this->ajaxReturn(500, '请选择要查看的推送任务');
    }

    $msgId = model('corpwechat.CorpwechatMsgTemplate')
      ->where('id', $template_id)
      ->value('msgId');
    if (!isset($msgId) || empty($msgId)) {
      $this->ajaxReturn(500, '缺少企业群发消息的id');
    }

    $return = array();
    $key = input('post.key/s', '', 'trim');
    switch ($key) {
      case 'push':
        $return = $this->_pushResult($msgId);
        break;

      case 'send':
        $return = $this->_sendResult($msgId);
        break;

      default:
        $this->ajaxReturn(500, '错误的结果类型参数');
        break;
    }

    $this->ajaxReturn(200, 'SUCCESS', $return);
  }

  /** 查看群发推送结果
   * @Method _pushResult()
   *
   * @param string $msgId 企业群发消息的id
   *
   * @return array
   *
   * @author  Administrator
   * @version 1.1
   * @since   2022/3/30
   */
  public function _pushResult($msgId) {
    $page_num = input('post.page_num/d', 1, 'intval');
    $page_size = input('post.page_size/d', 10, 'intval');

    $map = array();

    $keyword = input('post.keyword/s', '', 'trim');
    // 1.关键字
    if (isset($keyword) && !empty($keyword)) {
      // 关键字检索[企微客户名字]
      $map['u.name'] = ['like', '%' . $keyword . '%'];
    }

    $type = input('post.type/d', 0, 'intval');
    switch ($type) {
      case 1:
      case 2:
      case 3:
        $map['l.type'] = ['=', $type];
        break;

      default:
        $map['l.type'] = ['IN', [2, 3]];
        break;
    }

    $map['l.msgId'] = ['=', $msgId];

    $order = ['l.id DESC'];

    $field = "l.id,
        l.content,
        l.type,
        l.status,
        IFNULL(u.name,u.userid) as external_name,
        IFNULL(m.username,'非平台用户') as username";

    return model('corpwechat.CorpwechatPushLog')
      ->getList($map, $order, $page_num, $page_size, $field);
  }

  /** 查看群发发送结果
   * @Method _sendResult()
   *
   * @param string $msgId 企业群发消息的id
   *
   * @return array
   *
   * @author  Administrator
   * @version 1.1
   * @since   2022/3/30
   */
  public function _sendResult($msgId) {
    $page_num = input('post.page_num/d', 1, 'intval');
    $page_size = input('post.page_size/d', 10, 'intval');

    $map = array();

    $keyword = input('post.keyword/s', '', 'trim');
    // 1.关键字
    if (isset($keyword) && !empty($keyword)) {
      // 关键字检索[企微客户名字]
      $map['u.name'] = ['like', '%' . $keyword . '%'];
    }

    // 发送状态[0:未发送;1:已发送;2:因客户不是好友导致发送失败;3:因客户已经收到其他群发消息导致发送失败]
    $status = input('post.status/d', 0, 'intval');
    switch ($status) {
      case 0:
      case 1:
      case 2:
      case 3:
        $map['l.status'] = ['=', $status];
        break;

      default:
        break;
    }

    $map['l.msgId'] = ['=', $msgId];
    $map['l.type'] = ['=', 4];

    $order = ['l.id DESC'];

    $field = "l.id,
        l.content,
        l.type,
        l.status,
        l.send_time,
        IFNULL(u.name,u.userid) as external_name,
        IFNULL(s.name,l.userid) as staff_name,
        IFNULL(m.username,'非平台用户') as username";

    return model('corpwechat.CorpwechatPushLog')
      ->getList($map, $order, $page_num, $page_size, $field);
  }
}
