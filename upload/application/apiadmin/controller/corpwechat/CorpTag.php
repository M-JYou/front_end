<?php

/** 客户标签管理 */

namespace app\apiadmin\controller\corpwechat;

use app\common\controller\Backend;
use app\common\lib\corpwechat\ExternalContact;
use think\Db;
use think\response\Jsonp;
use think\Validate;

class CorpTag extends Backend {
    /**
     * @Purpose
     * 企业ID
     * @var string
     */
    private $corpId = '';

    /**
     * @Purpose
     * 应用ID
     * @var string
     */
    private $agentId = '';

    /**
     * @Purpose
     * 应用的凭证密钥
     * @var string
     */
    private $corpSecret = '';

    /**
     * @Purpose
     * 通讯录的凭证秘钥
     * @var string
     */
    private $customerContactSecret = '';


    public function _initialize() {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $apiConfig = config('global_config.corpwechat_api');
        if (empty($apiConfig) || !isset($apiConfig) || !is_array($apiConfig)) {
            $this->ajaxReturn(500, '请先完成企业微信配置');
        }

        $is_open = $apiConfig['is_open'] ? intval($apiConfig['is_open']) : -1;

        switch ($is_open) {
            case 1:
                $this->corpId = isset($apiConfig['corpid']) ? $apiConfig['corpid'] : '';
                $this->agentId = isset($apiConfig['agentid']) ? $apiConfig['agentid'] : '';
                $this->corpSecret = isset($apiConfig['corpsecret']) ? $apiConfig['corpsecret'] : '';
                $this->customerContactSecret = isset($apiConfig['customer_contact_secret']) ? $apiConfig['customer_contact_secret'] : '';
                break;

            case 2:
                $this->ajaxReturn(500, '企微服务已关闭');
                break;

            case -1:
            default:
                $this->ajaxReturn(500, '企微服务状态异常');
                break;
        }
    }


    /**
     * @Purpose:
     * 首页
     * @Method index()
     *
     * @param null
     *
     * @return Jsonp
     *
     * @throws null
     *
     * @link {domain}corpwechat/corp_tag/index
     *
     * @author  Administrator
     * @version 1.1
     * @since   2022/3/1
     */
    public function index() {
        $list = model('corpwechat.CorpwechatCorptag')->getTreeCache();
        $this->ajaxReturn(200, 'SUCCESS', $list);
    }


    /**
     * @Purpose:
     * 添加标签组
     * @Method addTagGroup()
     *
     * @param string $group_name 标签组名称，长度限制为30个字以内（汉字或英文字母）
     *
     * @return Jsonp
     *
     * @throws null
     *
     * @link {domain}corpwechat/corp_tag/addTagGroup
     *
     * @author  Administrator
     * @version 1.1
     * @since   2022/3/1
     */
    public function addTagGroup() {
        // 接受请求参数
        $input_data = [
            'group_name' => input('post.group_name/s', '', 'trim'),
        ];

        // Validate验证规则
        $rule = [
            'group_name' => 'require|chsDash|length:1,30',
        ];

        // Validate报错信息
        $msg = [
            'group_name.require' => '请输入标签组名称',
            'group_name.chsDash' => '标签组名称只能是汉字、字母、数字和下划线_及破折号-',
            'group_name.length' => '标签组名称长度限制为1~30',
        ];

        // 判断标签组名称是否已存在
        $is_set = model('corpwechat.CorpwechatCorptag')
            ->where('name', $input_data['group_name'])
            ->where('type', 1)
            ->find();
        if (null != $is_set) {
            $this->ajaxReturn(500, '标签组名称已存在');
        }

        // 实例化验证类
        $validate = new Validate($rule, $msg);
        if (!$validate->check($input_data)) {
            $this->ajaxReturn(500, $validate->getError());
        }

        $externalContact = new ExternalContact($this->corpId, $this->corpSecret);
        $tag_group_info = [
            'group_name' => $input_data['group_name'],
            'tag' => [['name' => $input_data['group_name']]]
        ];
        $result = $externalContact->addCorpTag($tag_group_info);

        if (false === $result) {
            $this->ajaxReturn(500, $externalContact->getError());
        }
        if (!isset($result['tag_group']) || empty($result['tag_group'])) {
            $this->ajaxReturn(500, '标签组添加失败');
        } else {
            $tag_group = $result['tag_group'];
            $insert_data[] = [
                'id' => $tag_group['group_id'],
                'name' => $tag_group['group_name'],
                'group_id' => 0,
                'group_name' => $tag_group['group_name'],
                'type' => 1,
                'create_time' => $tag_group['create_time'],
                'order' => $tag_group['order']
            ];
        }

        if (isset($tag_group['tag']) && !empty($tag_group['tag'])) {
            foreach ($tag_group['tag'] as $tag) {
                $insert_data[] = [
                    'id' => $tag['id'],
                    'name' => $tag['name'],
                    'group_id' => $tag_group['group_id'],
                    'group_name' => $tag_group['group_name'],
                    'type' => 2,
                    'create_time' => $tag['create_time'],
                    'order' => $tag['order']
                ];
            }
        }

        Db::startTrans();
        try {
            $admin_result = model('corpwechat.CorpwechatCorptag')
                ->allowField(true)
                ->isUpdate(false)
                ->saveAll($insert_data, false);
            if (false === $admin_result) {
                throw new \Exception(model('corpwechat.CorpwechatCorptag')->getError());
            }

            // 日志
            $log_result = model('AdminLog')->record(
                '添加企微标签组【标签组-ID:' . $tag_group['tag'][0]['id'] . '-name:' . $tag_group['tag'][0]['name'] . '】',
                $this->admininfo
            );
            if (false === $log_result) {
                throw new \Exception(model('AdminLog')->getError());
            }

            // 提交事务
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollBack();
            $this->ajaxReturn(500, $e->getMessage());
        }

        $this->ajaxReturn(200, '标签组添加成功');
    }


    /**
     * @Purpose:
     * 删除标签组
     * @Method delTagGroup()
     *
     * @param string $group_id 标签ID
     *
     * @return Jsonp
     *
     * @throws null
     *
     * @link {domain}corpwechat/corp_tag/delTagGroup
     *
     * @author  Administrator
     * @version 1.1
     * @since   2022/3/1
     */
    public function delTagGroup() {
        // 接受请求参数
        $group_id = input('post.group_id/s', '', 'trim');

        $externalContact = new ExternalContact($this->corpId, $this->corpSecret);
        $group_ids = [
            'group_id' => [$group_id]
        ];
        $result = $externalContact->delCorpTag($group_ids);

        if (false === $result) {
            $this->ajaxReturn(500, $externalContact->getError());
        }

        Db::startTrans();
        try {
            $admin_result = model('corpwechat.CorpwechatCorptag')
                ->destroy(['id|group', '=', $group_id]);
            if (false === $admin_result) {
                throw new \Exception(model('corpwechat.CorpwechatCorptag')->getError());
            }

            // 日志
            $log_result = model('AdminLog')->record(
                '删除企微标签组【标签组-ID:' . $group_id . '】',
                $this->admininfo
            );
            if (false === $log_result) {
                throw new \Exception(model('AdminLog')->getError());
            }

            // 提交事务
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollBack();
            $this->ajaxReturn(500, $e->getMessage());
        }

        $this->ajaxReturn(200, '标签组删除成功');
    }


    /**
     * @Purpose:
     * 添加标签
     * @Method addTag()
     *
     * @param string $group_id 标签组ID
     * @param string $tag_name 标签名称，长度限制为32个字以内（汉字或英文字母）
     *
     * @return Jsonp
     *
     * @throws null
     *
     * @link {domain}corpwechat/corp_tag/addTag
     *
     * @author  Administrator
     * @version 1.1
     * @since   2022/3/1
     */
    public function addTag() {
        // 接受请求参数
        $input_data = [
            'group_id' => input('post.group_id/s', '', 'trim'),
            'tag_name' => input('post.tag_name/s', '', 'trim'),
        ];

        // Validate验证规则
        $rule = [
            'group_id' => 'require',
            'tag_name' => 'require|chsDash|length:1,30',
        ];

        // Validate报错信息
        $msg = [
            'group_id.require' => '请选择要增加标签所在的标签组',
            'tag_name.require' => '请输入标签名称',
            'tag_name.chsDash' => '标签名称只能是汉字、字母、数字和下划线_及破折号-',
            'tag_name.length' => '标签名称长度限制为1~30',
        ];

        // 实例化验证类
        $validate = new Validate($rule, $msg);
        if (!$validate->check($input_data)) {
            $this->ajaxReturn(500, $validate->getError());
        }

        // 判断标签组下标签名称是否已存在
        $is_set = model('corpwechat.CorpwechatCorptag')
            ->where('name', $input_data['tag_name'])
            ->where('group_id', $input_data['group_id'])
            ->where('type', 2)
            ->find();
        if (null != $is_set) {
            $this->ajaxReturn(500, '该标签组下标签名称已存在');
        }

        $externalContact = new ExternalContact($this->corpId, $this->corpSecret);
        $tag_info = [
            'group_id' => $input_data['group_id'],
            'tag' => [['name' => $input_data['tag_name']]]
        ];
        $result = $externalContact->addCorpTag($tag_info);

        if (false === $result) {
            $this->ajaxReturn(500, $externalContact->getError());
        }

        if (!isset($result['tag_group']) || empty($result['tag_group'])) {
            $this->ajaxReturn(500, '标签添加失败');
        } else {
            $tag_group = $result['tag_group'];
            $insert_data = [
                'id' => $tag_group['tag'][0]['id'],
                'name' => $tag_group['tag'][0]['name'],
                'group_id' => $tag_group['group_id'],
                'group_nema' => $tag_group['group_name'],
                'type' => 2,
                'create_time' => $tag_group['tag'][0]['create_time'],
                'order' => $tag_group['tag'][0]['order']
            ];
        }

        Db::startTrans();
        try {
            $admin_result = model('corpwechat.CorpwechatCorptag')
                ->allowField(true)
                ->isUpdate(false)
                ->save($insert_data);
            if (false === $admin_result) {
                throw new \Exception(model('corpwechat.CorpwechatCorptag')->getError());
            }

            // 日志
            $log_result = model('AdminLog')->record(
                '添加企微标签【标签-ID:' . $tag_group['tag'][0]['id'] . '-name:' . $tag_group['tag'][0]['name'] . '】',
                $this->admininfo
            );
            if (false === $log_result) {
                throw new \Exception(model('AdminLog')->getError());
            }

            // 提交事务
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollBack();
            $this->ajaxReturn(500, $e->getMessage());
        }

        $this->ajaxReturn(200, '标签添加成功');
    }


    /**
     * @Purpose:
     * 删除标签
     * @Method delTag()
     *
     * @param string $tag_id 标签ID
     *
     * @return Jsonp
     *
     * @throws null
     *
     * @link {domain}corpwechat/corp_tag/delTag
     *
     * @author  Administrator
     * @version 1.1
     * @since   2022/3/1
     */
    public function delTag() {
        // 接受请求参数
        $tag_id = input('post.tag_id/s', '', 'trim');

        $tag_info = model('corpwechat.CorpwechatCorptag')->find($tag_id);

        if (null === $tag_info) {
            $this->ajaxReturn(500, '要删除的标签不存在');
        } else {
            $is_last = model('corpwechat.CorpwechatCorptag')
                ->where('group_id', $tag_info->group_id)
                ->where('id', '<>', $tag_id)
                ->find();
        }

        $externalContact = new ExternalContact($this->corpId, $this->corpSecret);
        $tag_ids = [
            'tag_id' => [$tag_id]
        ];
        $result = $externalContact->delCorpTag($tag_ids);

        if (false === $result) {
            $this->ajaxReturn(500, $externalContact->getError());
        }

        Db::startTrans();
        try {
            $tag_result = model('corpwechat.CorpwechatCorptag')
                ->destroy($tag_id);
            if (false === $tag_result) {
                throw new \Exception(model('corpwechat.CorpwechatCorptag')->getError());
            }

            if (null === $is_last) {
                $group_result = model('corpwechat.CorpwechatCorptag')
                    ->destroy($tag_info->group_id);
                if (false === $group_result) {
                    throw new \Exception(model('corpwechat.CorpwechatCorptag')->getError());
                }
            }


            // 日志
            $log_result = model('AdminLog')->record(
                '删除企微标签【标签-ID:' . $tag_id . '】',
                $this->admininfo
            );
            if (false === $log_result) {
                throw new \Exception(model('AdminLog')->getError());
            }

            // 提交事务
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollBack();
            $this->ajaxReturn(500, $e->getMessage());
        }

        $this->ajaxReturn(200, '标签删除成功');
    }


    /**
     * @Purpose:
     * 编辑企业客户标签
     * @Method editCorpTag()
     *
     * @param string $tag_id 标签或标签组的id
     * @param string $tag_name 新的标签或标签组名称
     *
     * @return Jsonp
     *
     * @throws null
     *
     * @link {domain}corpwechat/corp_tag/editCorpTag
     *
     * @author  Administrator
     * @version 1.1
     * @since   2022/3/1
     */
    public function editCorpTag() {
        // 接受请求参数
        $input_data = [
            'tag_id' => input('post.tag_id/s', '', 'trim'),
            'tag_name' => input('post.tag_name/s', '', 'trim'),
        ];

        // Validate验证规则
        $rule = [
            'tag_id' => 'require',
            'tag_name' => 'require|chsDash|length:1,30',
        ];

        // Validate报错信息
        $msg = [
            'tag_id.require' => '请选择要修改的标签/标签组',
            'tag_name.require' => '请输入标签/标签组名称',
            'tag_name.chsDash' => '标签/标签组名称只能是汉字、字母、数字和下划线_及破折号-',
            'tag_name.length' => '标签/标签组名称长度限制为1~30',
        ];

        // 实例化验证类
        $validate = new Validate($rule, $msg);
        if (!$validate->check($input_data)) {
            $this->ajaxReturn(500, $validate->getError());
        }

        $old_tag = model('corpwechat.CorpwechatCorptag')
            ->where('id', $input_data['tag_id'])
            ->find();
        if (null === $old_tag) {
            $this->ajaxReturn(500, '要修改的标签/标签组不存在');
        }

        switch ($old_tag->type) {
            case 1:
                // 判断标签组名称是否已存在
                if ($old_tag->name === $input_data['tag_name']) {
                    $this->ajaxReturn(500, '标签组名称未变更');
                }
                $is_set = model('corpwechat.CorpwechatCorptag')
                    ->where('name', $input_data['tag_name'])
                    ->where('type', 1)
                    ->find();
                if (null != $is_set) {
                    $this->ajaxReturn(500, '标签组名称已存在');
                }
                break;

            case 2:
                // 判断标签组下标签名称是否已存在
                if ($old_tag->name === $input_data['tag_name']) {
                    $this->ajaxReturn(500, '标签名称未变更');
                }
                $is_set = model('corpwechat.CorpwechatCorptag')
                    ->where('name', $input_data['tag_name'])
                    ->where('group_id', $input_data['tag_id'])
                    ->where('type', 2)
                    ->find();
                if (null != $is_set) {
                    $this->ajaxReturn(500, '该标签组下标签名称已存在');
                }
                break;

            default:
                $this->ajaxReturn(500, '要修改的标签/标签组信息异常');
                break;
        }

        $externalContact = new ExternalContact($this->corpId, $this->corpSecret);
        $tag_info = [
            'id' => $input_data['tag_id'],
            'name' => $input_data['tag_name']
        ];
        $result = $externalContact->editCorpTag($tag_info);

        if (false === $result) {
            $this->ajaxReturn(500, $externalContact->getError());
        }

        $update_data = [
            'id' => $input_data['tag_id'],
            'name' => $input_data['tag_name']
        ];
        Db::startTrans();
        try {
            $admin_result = model('corpwechat.CorpwechatCorptag')
                ->allowField(true)
                ->isUpdate(true)
                ->save($update_data);
            if (false === $admin_result) {
                throw new \Exception(model('corpwechat.CorpwechatCorptag')->getError());
            }

            // 日志
            $log_result = model('AdminLog')->record(
                '编辑企微标签【标签-ID:' . $input_data['tag_id'] . '-name:' . $input_data['tag_name'] . '】',
                $this->admininfo
            );
            if (false === $log_result) {
                throw new \Exception(model('AdminLog')->getError());
            }

            // 提交事务
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollBack();
            $this->ajaxReturn(500, $e->getMessage());
        }

        switch ($old_tag->type) {
            case 1:
                $this->ajaxReturn(200, '标签组修改成功');
                break;

            case 2:
                $this->ajaxReturn(200, '标签修改成功');
                break;

            default:
                $this->ajaxReturn(500, '要修改的标签/标签组信息异常');
                break;
        }
    }


    /**
     * @Purpose:
     * 同步企业标签库
     * @Method getCorpTagList()
     *
     * @param null
     *
     * @return Jsonp
     *
     * @throws null
     *
     * @link {domain}corpwechat/corp_tag/synchronization
     *
     * @author  Administrator
     * @version 1.1
     * @since   2022/2/24
     */
    public function synchronization() {
        $externalContact = new ExternalContact($this->corpId, $this->corpSecret);
        $data = $externalContact->getCorpTagList();

        if (false === $data) {
            $this->ajaxReturn(500, $externalContact->getError());
        }

        if (isset($data['tag_group']) && !empty($data['tag_group'])) {
            $tag_group = $data['tag_group'];
        } else {
            $this->ajaxReturn(500, '企业标签库同步失败');
        }

        $insert_data = [];
        foreach ($tag_group as $groups) {
            $group_info = array(
                'id' => $groups['group_id'],
                'group_id' => 0,
                'name' => $groups['group_name'],
                'group_name' => $groups['group_name'],
                'type' => 1,
                'create_time' => $groups['create_time'],
                'order' => $groups['order']
            );
            array_push($insert_data, $group_info);
            unset($group_info);

            if (is_array($groups['tag']) && count($groups['tag']) > 0) {
                foreach ($groups['tag'] as $tags) {
                    $tag_info = array(
                        'id' => $tags['id'],
                        'name' => $tags['name'],
                        'group_id' => $groups['group_id'],
                        'group_name' => $groups['group_name'],
                        'type' => 2,
                        'create_time' => $tags['create_time'],
                        'order' => $tags['order']
                    );
                    array_push($insert_data, $tag_info);
                    unset($tag_info);
                }
            } else {
                continue;
            }
        }

        Db::startTrans();
        try {
            $del_result = model('corpwechat.CorpwechatCorptag')
                ->where('id', '<>', 0)
                ->whereOr('group_id', '<>', 0)
                ->delete();
            if (false === $del_result) {
                throw new \Exception(model('corpwechat.CorpwechatCorptag')->getError());
            }

            $admin_result = model('corpwechat.CorpwechatCorptag')
                ->allowField(true)
                ->isUpdate(false)
                ->saveAll($insert_data, false);
            if (false === $admin_result) {
                throw new \Exception(model('corpwechat.CorpwechatCorptag')->getError());
            }

            // 日志
            $log_result = model('AdminLog')->record(
                '同步企微【标签】',
                $this->admininfo
            );
            if (false === $log_result) {
                throw new \Exception(model('AdminLog')->getError());
            }

            // 提交事务
            Db::commit();
        } catch (\Exception $e) {
            // 回滚事务
            Db::rollBack();
            $this->ajaxReturn(500, $e->getMessage());
        }

        $this->ajaxReturn(200, '同步成功');
    }


    /**
     * @Purpose:
     * 标签/标签组详情
     * @Method details()
     *
     * @param integer $tag_id 标签/标签组ID
     *
     * @return Jsonp
     *
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     *
     * @link {domain}corpwechat/corp_tag/details
     *
     * @author  Administrator
     * @version 1.1
     * @since   2022/3/10
     */
    public function details() {
        $tag_id = input('post.tag_id/s', '', 'trim');

        if (!isset($tag_id) || empty($tag_id)) {
            $this->ajaxReturn(500, '请选择要查看的标签/标签组');
        }

        $tag_info = model('corpwechat.CorpwechatCorptag')
            ->field('id as tag_id, name as tag_name, type')
            ->find($tag_id);

        if ($tag_info === null) {
            $this->ajaxReturn(500, '要查看的标签/标签组不存在');
        } else {
            $tag_info = $tag_info->toArray();
            $this->ajaxReturn(200, 'SUCCESS', $tag_info);
        }
    }
}
